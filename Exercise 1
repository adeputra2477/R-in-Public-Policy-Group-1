# 1.2.5
## Q1
install.packages("tidyverse")
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
glimpse(penguins)
# Answer: There are 34 rows and 8 columns in penguins.

## Q2
?penguins
#Answer: The bill_depth_mm variable in the penguins data frame describes the depth of the penguin's bill (in millimeters). 

## Q3
ggplot(
  data = penguins, 
  aes(x = bill_depth_mm, y = bill_length_mm)
) + 
  geom_point()
#> Warning: Removed 2 rows containing missing values (`geom_point()`).
#Answer:3.There is a positive, linear relationship between bill depth and bill length of penguins.

## Q4
ggplot(
  data = penguins, 
  aes(x = bill_depth_mm, y = species)
) + 
  geom_point()
#> Warning: Removed 2 rows containing missing values (`geom_point()`).
#Answer: The scatterplot plots points vertically for each species along the x-axis.
#A scatterplot is not that useful for visualizing a continuous variable (bill_depth_mm) against a categorical variable (species) as it’s difficult to use it to describe the distribution of bill depth across species, a boxplot or violin plot would be more appropriate.

## Q5
# Answer: The given code doesn’t specify aesthetic mappings for x and y, which are required for for the point geom.
# Fix: Add aesthetic mappings to geom_point. For example, if you want to create a scatterplot of bill_length_mm vs. bill_depth_mm, you can use the following code: 
ggplot(
  data = penguins, 
  aes(x = bill_length_mm, y = bill_depth_mm)
) + 
  geom_point()

## Q6. What does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.
# The na.rm argument determines whether missing values (NA) should be removed before plotting.
# The default value of the argument is FALSE, which means that missing values in the penguins dataset are not removed. Instead, a warning message is issued, and rows with missing values are ignored in the plot.
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(na.rm = TRUE)

## Q7. Add the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(na.rm = TRUE) + labs(caption = "Data come from the palmerpenguins package") 

## Q8. Recreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point(mapping = aes(color = bill_depth_mm)) + geom_smooth(method = "loess")
# The bill_depth_mm should be mapped to color.
# It should be mapped at the geom level, only for the point geom not for the smooth geom, because the points are colored but the smooth line is single color.

## Q9. Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)) + geom_point() + geom_smooth(se = FALSE)
# We predict that the output will be a scatterplot of body_mass_g vs. flipper_length_mm with points in three different colors to represent penguins from different islands. And there are also three smooth lines for each island in different colors. The plot created by the code indeed match the prediction.

## Q10. Will these two graphs look different? Why/why not?
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point() + geom_smooth()
ggplot() + geom_point(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_smooth(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g))
# These two graphs will look the same, because in the first plot the aesthetic mappings are at the global level and assigned to each geoms (point and smooth line), and in the second plot both geoms have the same aesthetic mappings at the local level.

# 1.4.3
# Q1. Make a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?

ggplot(penguins, aes(y = species)) +
  geom_bar()

# Answer: When we assign 'species' to the y aesthetic, the x-axis and y-axis of the bar plot are switched. The species are displayed in 3 rows, and the width of the bar represents the count of data point of each row.

# Q2.How are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?

ggplot(penguins, aes(x = species)) +
  geom_bar(color = "red")

ggplot(penguins, aes(x = species)) +
  geom_bar(fill = "red")

# answer: The first graph shows the color on the border of each bar, and the second graph shows the color inside the bars. Since the bar graphs are separated and not adjacent by categories, coloring the border is ineffective.

# Q3. What does the bins argument in geom_histogram() do?

# answer: The bins argument in geom_histogram() controls the number of bins used to divide the range of data into intervals for a histogram. Each bin represents a range of values, and the height of the bar represents the count of data points within that range.

# Q4.Make a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.1)

# answer: The range of carat is between 0.2 and 5.1, but most of the data is between 0.2 and 2. Additionally, diamonds are typically traded in increments of 0.1 carats, making a bandwidth of 0.1 intuitive and easy to understand.

# Question 1.5.5

## Q1
# For categorical varibles, we have manufacturer, model, trans, drv, fl, class. Also, we only have one numerical variable, which is displ
# I use sapply(mpg, class) function running mpg, which shows features of each variable in mpg 
?mpg
sapply(mpg, class)

## Q2

# Below is the scatterplot of hwy vs displ
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point() +
    labs(title = "Highway MPG vs. Engine Displacement")

# Below is the scatterplot added with color
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(aes(color = cyl)) +
    labs(title = "Color Mapped to cyl (Number of Cylinders)")

# Below is the scatterplot added with size
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(aes(size = cyl)) +
    labs(title = "Size Mapped to cyl (Number of Cylinders)")

# Below is the scatterplot added with size + color
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(aes(color = cyl, size = cyl)) +
    labs(title = "Color and Size Mapped to cyl")

# Below is the scatterplot added with shape
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(aes(shape = cyl)) +
    labs(title = "Mapping cyl to both color and size")

# For size & color, since another variable cyl is numeric, shape & size & color can be applied. It shows continuous changes of the variable. However, the final plot, the shpae can't be applied since continuous variable can't be mapped to it.

## Q3

# Below is the scatterplot where cty is mapped to linewidth
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_line(aes(linewidth = cty)) +
    labs(title = "Mapping cty to linewidth in line plot")

# At the graph, we can see changes of cty, city miles per galon, by displ.

## Q4

# Below is the scatterplot where cty is mapped to multiple aesthetics
ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(aes(color = cty, size = cty, shape = factor(cty))) +
    labs(title = "Mapping cty to color, size, and shape")

# At the graph, each aesthetic represent the same variable's values in different ways.

## Q5

# I recall the data by the command below.
glimpse(penguins)

# This is the scatterplot with species as color
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
    geom_point() +
    labs(title = "Bill Depth vs. Bill Length Colored by Species",
         x = "Bill Length (mm)",
         y = "Bill Depth (mm)") +
    theme_minimal()

# The provided scatterplot visualizes the relationship between bill length (x-axis) and bill depth (y-axis) for three penguin species (Adelie, Chinstrap, and Gentoo)
# After coloring, we can vividly see species are clustering.

# This is the scatterplot faceted by species
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
    geom_point(aes(color = species)) +
    facet_wrap(~species) +
    labs(title = "Bill Depth vs. Bill Length by Species",
         x = "Bill Length (mm)",
         y = "Bill Depth (mm)") +
    theme_minimal()

#The faceted visualization provides a clearer view of the distribution of bill lengths and depths for each species without interference from other groups.

## Q6

# The code creates separate legends because each aesthetic is treated independently and the colored species line only midifies the color legend label. To combine the two legends into a single one, we should ensure both aesthetics share the same legend title. Below is the one example of modification.
ggplot(
    data = penguins,
    mapping = aes(
        x = bill_length_mm, y = bill_depth_mm, 
        color = species, shape = species
    )
) +
    geom_point() +
    labs(color = "Species", shape = "Species")
